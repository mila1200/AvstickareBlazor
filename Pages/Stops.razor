@page "/mina-stopp"
@inject TripStopService TripStopService
@inject HttpClient Http
@inject NavigationManager Navigation
@using AvstickareBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<PageTitle>Mina stopp</PageTitle>

<div style="margin-bottom: 60px;">
    <div id="stop-container">
        <h1 style="margin-top: 10px;">Mina stopp</h1>

    @if (stopDetails.Any() && fromPlace != null)
    {
        <div style="text-align: center; margin-top: 10px;">
            <h2>Från: <span style="font-style: italic;">@fromPlace.Name</span></h2>
        </div>
    }

    @if (stopDetails.Any())
    {
        <MudList T="string">
            @foreach (var stop in stopDetails.OrderBy(stop => stop.Order))
            {
                <MudListItem>
                                <div style="display: flex; width: 100%;">

                                    <!--bild-->
                                    <div style="margin-right: 12px;">
                                        <MudImage Style="height: auto; max-width: 120px;" Src="@stop.Photo" Alt="Platsbild" />
                                    </div>

                                    <!--innehåll + layout -->
                                    <div style="display: flex; flex-direction: column; flex-grow: 1; position: relative;">
                                        <!--övre rad: namn och ordning -->
                                        <div style="display: flex; justify-content: space-between;">
                                            <MudText Typo="Typo.h6">@stop.Name</MudText>
                                            <MudAvatar Size="Size.Small" Color="Color.Primary" Style="Color: black;">@stop.Order
                                            </MudAvatar>
                                        </div>

                                        <!-- adress -->
                                        <MudText Typo="Typo.body2">@stop.Address</MudText>

                                        <!--nedre rad: soptunna.-->
                                        <div style="display: flex; justify-content: flex-end; margin-top: auto;"
                                            @onclick:stopPropagation>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Large"
                                                Color="Color.Error" OnClick="@(() => RemoveStop(stop.Id!))" />
                                        </div>
                                    </div>
                                </div>
                            
                        </MudListItem>
            }
        </MudList>

        @if (stopDetails.Any() && toPlace != null)
        {
            <div style="text-align: center; margin-top: 10px;">
                <h2>Till: <span style="font-style: italic;">@toPlace.Name</span></h2>
            </div>
        }

        <MudDivider Class="my-4" />
        
        @if (!showSparaForm)
        {
             <AuthorizeView>
    <Authorized>
        <MudButton FullWidth="true"
                   Class="mt-6"
                   Style="color: black;"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => showSparaForm = true)">
            Spara resa
        </MudButton>
    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Login"
                   Style="color: black;"
                   Color="Color.Primary"
                   FullWidth="true"
                   Class="mt-6"
                   OnClick="@(() => Navigation.NavigateTo("/logga-in?redirect=/mina-stopp"))">
            Logga in för att spara resa
        </MudButton>
    </NotAuthorized>
    </AuthorizeView>
        }
        else
        {   
            <MudContainer >
            <MudTextField Label="Namn på resan" @bind-Value="tripName" Required="true" Immediate="true" RequiredError="Resan måste ha ett namn" />
            <MudButton OnClick="() => SaveTripAsync(tripName)" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Style="color: black;" Color="Color.Primary" Class="mt-5">Spara</MudButton>
            <MudButton OnClick="() => showSparaForm = false" Class="mt-5" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Default">Avbryt</MudButton>
            </MudContainer>
        }
        
    }
    else
    {
        <MudText>Inga stopp valda ännu.</MudText>
    }
    </div>
</div>

@code {
    private List<PlaceDetailsFront> stopDetails = [];
    private bool showSparaForm = false;
    private string tripName = $"Min resa {DateTime.Now:yyyy-MM-dd}";

    //från place, baserat på modellen PlaceDetailsFront
    private PlaceDetailsFront? fromPlace;

    //till place, baserat på PlaceDetailsFront
    private PlaceDetailsFront? toPlace;


    //ladda stopp när sidan laddas
    protected override async Task OnInitializedAsync()
    {
        await TripStopService.LoadAsync();
        stopDetails = await TripStopService.GetTemporaryStops();

        fromPlace = await TripStopService.GetFromPlaceDetailsAsync();
        toPlace = await TripStopService.GetToPlaceDetailsAsync();
    }

    //ta bort temporärt stopp
    private async Task RemoveStop(string id)
    {
        await TripStopService.RemoveTemporaryStop(id);
        stopDetails.RemoveAll(p => p.Id == id);

        //uppdatera ordningen 
        for (int i = 0; i < stopDetails.Count; i++)
        {
            stopDetails[i].Order = i + 1;
        }

        Snackbar.Add("Platsen har tagits bort från resan.", Severity.Info);
    }

    //spara resa från temporär till permanent
   private async Task SaveTripAsync(string tripName)
{
    var draft = TripStopService.Draft;

    var token = await LocalStorage.GetItemAsync<string>("authToken");
    if (string.IsNullOrWhiteSpace(draft.FromPlaceId) || string.IsNullOrWhiteSpace(draft.ToPlaceId) || string.IsNullOrWhiteSpace(token))
        return;

    var trip = new Trip { Name = tripName, FromPlaceId = draft.FromPlaceId, ToPlaceId = draft.ToPlaceId };

    var request = new HttpRequestMessage(HttpMethod.Post, "api/Trip")
    {
        Content = JsonContent.Create(trip)
    };
    request.Headers.Authorization = new("Bearer", token);

    var response = await Http.SendAsync(request);
    var savedTrip = await response.Content.ReadFromJsonAsync<Trip>();

    if (response.IsSuccessStatusCode && savedTrip != null)
    {
        foreach (var stopId in draft.StopPlaceIds)
            await TripStopService.AddStopToTripAsync(savedTrip.TripId, stopId);

        //rensa draft från local storage
        await TripStopService.ClearAsync();
        Snackbar.Add("Resan har sparats!", Severity.Success);
        Navigation.NavigateTo("/mina-resor");
    }
}
}