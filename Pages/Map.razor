@page "/karta"
@using AvstickareBlazor.Models
@using System.Text.Json
@inject IJSRuntime JS
@inject TripService TripService
@inject PlaceService PlaceService

<PageTitle>Karta</PageTitle>

@if (TripService.LatestTrip is null && string.IsNullOrWhiteSpace(mapServicePlaceId))
{

    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudText Typo="Typo.h6">Ingen rutt har skapats ännu.</MudText>
        <MudText>Gå tillbaka till startsidan och skapa en resa för att se den på kartan.</MudText>
        <MudLink Href="/" Underline="Underline.Always" Class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" class="me-1" />
            Till startsidan
        </MudLink>
    </MudContainer>
}
else
{
    <div id="map" style="height:100vh; width:100%;"></div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? mapServicePlaceId { get; set; }

    private bool hasRendered = false;

    protected override async Task OnParametersSetAsync()
    {
        if (TripService.LatestTrip is not null || !string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            return;
        }

        var json = await JS.InvokeAsync<string>("localStorage.getItem", "latestTrip");

        if (!string.IsNullOrWhiteSpace(json))
        {
            var trip = JsonSerializer.Deserialize<TripPlanResult>(json);
            if (trip is not null)
            {
                TripService.LatestTrip = trip;
                StateHasChanged();
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (hasRendered) return;
        hasRendered = true;

        //ge DOM tid att rendera <div id="map">
        await Task.Delay(100);

        //anropa funktion i js-mappen för att initiera mappen
        await JS.InvokeVoidAsync("initMap");

        if (TripService.LatestTrip is not null)
        {
            await JS.InvokeVoidAsync("drawTrip", TripService.LatestTrip.Polyline, TripService.LatestTrip.SuggestedPlaces);
        }

        if (!string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            var place = await PlaceService.GetPlaceDetailsAsync(mapServicePlaceId);
            if (place?.Latitude != null && place?.Longitude != null)
            {
                await JS.InvokeVoidAsync("highlightPlace", place.Latitude, place.Longitude, place.Name ?? "Plats");
            }
        }
    }
}