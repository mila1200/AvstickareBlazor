@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject ISnackbar Snackbar

@page "/logga-in"
@using AvstickareBlazor.Models
@using System.Text.Json

<PageTitle>Logga in</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <h1>Logga in</h1>

        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Elevation="0" Dense="true" Class="mb-4">
                @ErrorMessage
            </MudAlert>
        }

        <MudTextField InputId="email" T="string" Required="true" RequiredError="Du måste ange en e-postadress"
            @bind-Value="Email" Label="E-postadress" Variant="Variant.Outlined" />

        <MudTextField InputId="password" Required="true" RequiredError="Du måste ange ett lösenord"
            @bind-Value="Password" InputType="@PasswordInput" Adornment="Adornment.End"
            AdornmentIcon="@PasswordInputIcon" AdornmentAriaLabel="Show Password" OnAdornmentClick="ClicktoShow"
            Label="Lösenord" Variant="Variant.Outlined" />

        <MudButton OnClick="LoginUser" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login"
            Style="color: black;" Color="Color.Primary" Class="mt-6">Logga in</MudButton>
    </MudForm>
    <div class="d-flex justify-center mt-15">
        <img src="images/Avstickare.svg" alt="Logotyp" style="height: 50px;" />
    </div>
</MudContainer>

@code
{
    //lösenord
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool isShow;

    //meddela användare
    private bool success;
    private string[] errors = { };
    public string? ErrorMessage { get; set; }
    //formuläret
    private MudForm? form;
    //lagra redirect-parameter
    public string? redirectUrl;
    //värde för inloggning
    public string? Email { get; set; }
    public string? Password { get; set; }

    //redirectar tillbaka när användaren är inloggad
    protected override void OnInitialized()
{
    var uri = new Uri(Navigation.Uri);
    var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
    redirectUrl = query["redirect"];
}
    void ClicktoShow()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task LoginUser()
{
    if (form is not null)
        await form.Validate();

    if (!success)
    {
        ErrorMessage = "Fyll i e-post och lösenord.";
        return;
    }

    try
    {
        var token = await AuthService.LoginAsync(Email!, Password!);

        if (string.IsNullOrWhiteSpace(token))
        {
            ErrorMessage = "Inloggningen misslyckades. Försök igen.";
            return;
        }

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Inloggning lyckades, välkommen!", Severity.Success);
        Navigation.NavigateTo(redirectUrl ?? "/");
    }
    catch (Exception ex)
    {
        ErrorMessage = "Något gick fel: " + ex.Message;
        await LocalStorage.RemoveItemAsync("authToken");
    }
}

}