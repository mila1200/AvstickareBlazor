@page "/plats/{mapServicePlaceId}"

<PageTitle>Platsdetaljer</PageTitle>

@using System.Net.Http.Json
@using AvstickareBlazor.Models
@using Microsoft.AspNetCore.Components.Authorization
@using static System.Net.WebRequestMethods
@inject PlaceService PlaceService
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject FavoriteService FavoriteService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject TripService TripService
@inject TripStopService TripStopService



<MudContainer Class="p-4 mb-20">
@if (isLoading)
{
        <MudProgressCircular Indeterminate="true" />
}
else if (!string.IsNullOrWhiteSpace(errorMessage))
{
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}
else if (place != null)
{
    @if (!string.IsNullOrEmpty(place.Photo))
    {
            <img src="@place.Photo" alt="Platsbild"
                style="max-width:100%; height:auto; border-radius:8px; margin-bottom:20px; margin-top: 20px; display: block;" />
    }

        <h1>@place.Name</h1>
        <MudText Typo="Typo.subtitle1">@place.Address</MudText>

        <AuthorizeView>
            <Authorized>
                @if(isAdded)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.RemoveCircleOutline" Style="color: black;" Size="Size.Large"  Color="Color.Primary" Class="mt-6" Variant="Variant.Filled" OnClick="RemoveFromTrip">
                        Ta bort stopp från resa
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Style="color: black;" Size="Size.Large" Color="Color.Primary" Class="mt-6" OnClick="AddToTrip">
                        Lägg till
                    </MudButton>
                }
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login"
                            Style="color: black;" Color="Color.Primary" Size="Size.Large" Class="mt-6"
                            OnClick="@(() => Navigation.NavigateTo($"/logga-in?redirect=/plats/{mapServicePlaceId}"))">
                            Logga in för att spara platsen till resan
                        </MudButton>
            </NotAuthorized>
        </AuthorizeView>
       

        <MudDivider Class="mt-5" />

        <MudContainer MaxWidth="MaxWidth.Medium" Style="margin: 0; padding: 0;">
            <h2>Information</h2>

            <MudGrid>
                @if (place.OpeningHours != null)
                {
                    <MudItem xs="12" sm="6" Class="d-flex flex-column">
                        <MudPaper Class="pa-4 rounded" Style="background-color: #FFDF7880; flex: 1;" Elevation="4">
                            <h3>Öppettider</h3>
                            @foreach (var day in place.OpeningHours)
                            {
                                <MudText Typo="Typo.body1">@day</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                }

                @if (!string.IsNullOrEmpty(place.Phone))
                {
                    <MudItem xs="12" sm="6" Class="d-flex flex-column">
                        <MudPaper Class="pa-4 rounded" Style="background-color: #FFDF7880; flex: 1;" Elevation="4">
                            <h3>Telefon</h3>
                            <MudText>@place.Phone</MudText>
                        </MudPaper>
                    </MudItem>
                }

                @if (!string.IsNullOrEmpty(place.Website))
                {
                    <MudItem xs="12" sm="6" Class="d-flex flex-column">
                        <MudPaper Class="pa-4 rounded" Style="background-color: #FFDF7880; flex: 1;" Elevation="4">
                            <h3>Webbplats</h3>
                            <MudTooltip Text="Öppnas i separat fönster" Arrow="true" Placement="Placement.Bottom">
                                <MudLink Href="@place.Website" target="_blank" Underline="Underline.Always"
                                    Class="d-flex align-center"
                                    Style="color: black; text-decoration-color: black; margin-top: 10px;"
                                    aria-label="@($"{place.Name}, öppnas i separat fönster")">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="me-1" Style="color: black;" />
                                    <span style="color: black;">@place.Name</span>
                                </MudLink>
                            </MudTooltip>
                        </MudPaper>
                    </MudItem>
                }

                @if (place.Rating.HasValue)
                {
                    <MudItem xs="12" sm="6" Class="d-flex flex-column">
                        <MudPaper Class="pa-4 rounded" Style="background-color: #FFDF7880; flex: 1;" Elevation="4">
                            <h3>Betyg</h3>
                            <MudText>@place.Rating</MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>

            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.PinDrop" Style="color: black;"
                Color="Color.Primary" FullWidth="true" Size="Size.Large" Class="mt-6">Visa på kartan
            </MudButton>

            <AuthorizeView>
                <Authorized>
                    @if(isFavorite == false)
                    {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.StarPurple500"
                            Style="color: black; background-color: #FFD54F;" FullWidth="true" Size="Size.Large" Class="mt-6"
                            OnClick="AddToFavorites">
                            Spara som favorit
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RemoveCircleOutline"
                            Style="color: black; background-color: #FFD54F;" FullWidth="true" Size="Size.Large" Class="mt-6"
                            OnClick="RemoveFromFavorites">
                            Ta bort från favoriter
                        </MudButton>
                    }
                    </Authorized>
                    <NotAuthorized>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login"
                            Style="color: black; background-color: #FFD54F;" FullWidth="true" Size="Size.Large" Class="mt-6"
                            OnClick="@(() => Navigation.NavigateTo($"/logga-in?redirect=/plats/{mapServicePlaceId}"))">
                            Logga in för att spara favorit
                        </MudButton>
                    </NotAuthorized>
                </AuthorizeView>

            </MudContainer>
        }
</MudContainer>


@code {
    [Parameter]
    public string? mapServicePlaceId { get; set; }
    private PlaceDetailsFront? place;
    private bool isLoading = true;
    private string? errorMessage;
    private string? favoriteErrorMessage;
    //omstoppet lagts till resan
    private bool isAdded = false;

    //kontroll om favoritmarkerad
    private bool isFavorite;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        errorMessage = null;
        place = null;
        //kollar om platsen har lagts till i den temporära listan
        isAdded = TripStopService.HasTemporaryStop(mapServicePlaceId!);


        if (string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            errorMessage = "Ingen plats-ID angiven.";
            isLoading = false;
            return;
        }
        try
        {
            //anropar service för att hämta platsinfo
            place = await PlaceService.GetPlaceDetailsAsync(mapServicePlaceId);

            if (place == null)
            {
                errorMessage = "Platsinformation saknas.";
            }

            //kontrollera om användaren är inloggad för att hantera favoritstatus
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                isFavorite = await FavoriteService.IsFavoriteAsync(mapServicePlaceId);
            }
            else
            {
                isFavorite = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ett oväntat fel uppstod: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

//lägg till stopp till resa.
   private void AddToTrip()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(mapServicePlaceId))
            {
            errorMessage = "Plats-ID saknas.";
            return;
            }

            TripStopService.AddTemporaryStop(mapServicePlaceId);
            isAdded = true;

             Snackbar.Add("Platsen har lagts till i resan.", Severity.Success);
        }
        catch
        {
        errorMessage = "Något gick fel. Platsen kunde inte läggas till";
        }
    }

    //ta bort stopp från resan
    private void RemoveFromTrip()
    {
        if(string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            errorMessage = "Plats-ID saknas";
            return;
        }

        TripStopService.RemoveTemporaryStop(mapServicePlaceId);
        isAdded = false;

        Snackbar.Add("Platsen har tagits bort från resan.", Severity.Info);
    }
    
    //lägg till plats till favoriter
    private async Task AddToFavorites()
    {
        if (string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            favoriteErrorMessage = "Plats-ID saknas.";
            return;
        }

        try
        {
            await FavoriteService.AddToFavoritesAsync(mapServicePlaceId);

            isFavorite = true;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add("Favorit tillagd!", Severity.Success, config =>
            {
                config.HideIcon = false;
                config.RequireInteraction = false;
                config.VisibleStateDuration = 3000;
            });

            favoriteErrorMessage = null;
        }
        catch (Exception ex)
        {
            favoriteErrorMessage = $"Något gick fel: {ex.Message}. Försök igen.";
        }
    }

    //ta bort från favoriter
    private async Task RemoveFromFavorites()
    {
        if (string.IsNullOrWhiteSpace(mapServicePlaceId))
        {
            favoriteErrorMessage = "Plats-id saknas.";
            return;
        }

        try
        {
            await FavoriteService.RemoveFromFavoritesAsync(mapServicePlaceId);

            Snackbar.Add("Favorit borttagen", Severity.Info);
            isFavorite = false;
            favoriteErrorMessage = null;
        }
        catch (Exception ex)
        {
            favoriteErrorMessage = $"Något gick fel: {ex.Message}";
        }
    }
}